# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NODE_VERSION: '14.17.5'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v4
      endpoint: 'io-azure-devops-github-ro'
    - repository: e2e_test
      type: github
      name: pagopa/pagopa-checkout-tests
      ref: main
      endpoint: 'io-azure-devops-github-rw'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch master 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      # and(
      #   succeeded(),
      #   or(
      #     eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      #     and(
      #       startsWith(variables['Build.SourceBranch'], 'refs/tags'),
      #       endsWith(variables['Build.SourceBranch'], '-RELEASE')
      #     )
      #   )
      # )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
              - template: templates/node-github-release/template.yaml@pagopaCommons
                parameters:
                  semver: '${{ parameters.RELEASE_SEMVER }}'
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  nodeVersion: $(NODE_VERSION)
                  pkg_cache_version_id: $(CACHE_VERSION_ID)
                  pkg_cache_folder: $(YARN_CACHE_FOLDER)

          - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
              - script: |
                  echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
                displayName: 'Skip release bundle'

  # Prepare Artifact with application bundle
  - stage: Prepare_artifact_UAT
    dependsOn:
      - Release
    pool:
      vmImage: 'ubuntu-latest'    
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: azure-templates/setup-project.yml
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/make-build.yml
            parameters:
              functions_host: 'https://api.uat.platform.pagopa.it'
              api_host: 'https://acardste.vaservices.eu'
              env: 'UAT'

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: BundleUAT

  # Deploy bundle to the UAT
  - stage: Deploy_UAT
    dependsOn:
      - Prepare_artifact_UAT
    jobs:
      - job: 'Deploy_UAT'       
        steps:
          - checkout: none

          - download: current
            artifact: BundleUAT

          - task: AzureCLI@1
            displayName: 'Sync checkout storage'
            inputs:
              azureSubscription: 'UAT-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                call az storage blob sync --container $web --account-name pagopaucheckoutsa -s "$(Pipeline.Workspace)\BundleUAT" -d p

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint'
            inputs:
              azureSubscription: 'UAT-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g pagopa-u-checkout-fe-rg -n pagopa-u-checkout-cdn-endpoint --profile-name pagopa-u-checkout-cdn-profile --content-paths "/*"

  - stage: E2E_Tests
    dependsOn:
      - Deploy_UAT
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: e2e_tests
        steps:
          - checkout: e2e_test
            displayName: 'Checkout tests'
          - script: |
             docker build -t e2e_test e2e-tests
            displayName: 'Build test image'
          - script: |
              docker run --name=e2e_test e2e_test
            displayName: 'Run e2e test container'
            continueOnError: true 
          - script: |
              docker cp e2e_test:/puppeteer/test_reports  test_reports
            displayName: 'Copy test result'
            continueOnError: true 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml' 
              searchFolder: '$(System.DefaultWorkingDirectory)'
              
  # PROD promotion
  - stage: UAT_TO_PROD_PROMOTION
    dependsOn:
      - Deploy_UAT
    jobs:
      - job: Deploy_PROD_WaitForApproval
        displayName: Wait for PROD approval
        pool: server
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day

  # Prepare Artifact with application bundle for PROD
  - stage: Prepare_artifact_PROD
    dependsOn:
      - UAT_TO_PROD_PROMOTION
    pool:
      vmImage: 'ubuntu-latest'    
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: azure-templates/setup-project.yml
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/make-build.yml
            parameters:
              functions_host: 'https://api.platform.pagopa.it'
              api_host: 'https://wisp2.pagopa.gov.it'
              env: 'PROD'

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: BundlePROD

  # PROD deploy
  - stage: Deploy_PROD
    dependsOn:
      - Prepare_artifact_PROD
    jobs:
      - job: 'Deploy_PROD'
        steps:
          - checkout: none

          - download: current
            artifact: BundlePROD

          - task: AzureCLI@1
            displayName: 'Sync checkout storage'
            inputs:
              azureSubscription: 'PROD-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                call az storage blob sync --container $web --account-name pagopapcheckoutsa -s "$(Pipeline.Workspace)\BundlePROD" -d p

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint'
            inputs:
              azureSubscription: 'PROD-PAGOPA-SERVICE-CONN'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g pagopa-p-checkout-fe-rg -n pagopa-p-checkout-cdn-endpoint --profile-name pagopa-p-checkout-cdn-profile --content-paths "/*"
